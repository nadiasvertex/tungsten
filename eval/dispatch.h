#include "eval/opcodes.h"
#include "eval/serdes.h"
#include "eval/binops.h"
#include "eval/unops.h"

namespace tungsten::vm {
void dispatch(tungsten::machine &m, const std::vector<uint8_t> &code, std::size_t &pc) {
	auto opcode = code[pc++];	std::uint8_t src1, src2, dst;	switch(opcode) {
	case shl_u8_rrr: {read_binop(code, pc, src1, src2, dst);
shl_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shl_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shl_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shl_s8_rrr: {read_binop(code, pc, src1, src2, dst);
shl_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shl_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shl_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shl_u16_rrr: {read_binop(code, pc, src1, src2, dst);
shl_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shl_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shl_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shl_s16_rrr: {read_binop(code, pc, src1, src2, dst);
shl_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shl_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shl_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shl_u32_rrr: {read_binop(code, pc, src1, src2, dst);
shl_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shl_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shl_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shl_s32_rrr: {read_binop(code, pc, src1, src2, dst);
shl_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shl_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shl_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shl_u64_rrr: {read_binop(code, pc, src1, src2, dst);
shl_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shl_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shl_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shl_s64_rrr: {read_binop(code, pc, src1, src2, dst);
shl_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shl_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shl_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shr_u8_rrr: {read_binop(code, pc, src1, src2, dst);
shr_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shr_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shr_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shr_s8_rrr: {read_binop(code, pc, src1, src2, dst);
shr_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shr_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shr_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shr_u16_rrr: {read_binop(code, pc, src1, src2, dst);
shr_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shr_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shr_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shr_s16_rrr: {read_binop(code, pc, src1, src2, dst);
shr_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shr_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shr_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shr_u32_rrr: {read_binop(code, pc, src1, src2, dst);
shr_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shr_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shr_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shr_s32_rrr: {read_binop(code, pc, src1, src2, dst);
shr_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shr_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shr_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shr_u64_rrr: {read_binop(code, pc, src1, src2, dst);
shr_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shr_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shr_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case shr_s64_rrr: {read_binop(code, pc, src1, src2, dst);
shr_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case shr_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
shr_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_and_u8_rrr: {read_binop(code, pc, src1, src2, dst);
binary_and_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_and_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_and_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_and_s8_rrr: {read_binop(code, pc, src1, src2, dst);
binary_and_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_and_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_and_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_and_u16_rrr: {read_binop(code, pc, src1, src2, dst);
binary_and_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_and_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_and_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_and_s16_rrr: {read_binop(code, pc, src1, src2, dst);
binary_and_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_and_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_and_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_and_u32_rrr: {read_binop(code, pc, src1, src2, dst);
binary_and_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_and_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_and_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_and_s32_rrr: {read_binop(code, pc, src1, src2, dst);
binary_and_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_and_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_and_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_and_u64_rrr: {read_binop(code, pc, src1, src2, dst);
binary_and_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_and_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_and_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_and_s64_rrr: {read_binop(code, pc, src1, src2, dst);
binary_and_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_and_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_and_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_or_u8_rrr: {read_binop(code, pc, src1, src2, dst);
binary_or_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_or_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_or_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_or_s8_rrr: {read_binop(code, pc, src1, src2, dst);
binary_or_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_or_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_or_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_or_u16_rrr: {read_binop(code, pc, src1, src2, dst);
binary_or_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_or_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_or_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_or_s16_rrr: {read_binop(code, pc, src1, src2, dst);
binary_or_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_or_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_or_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_or_u32_rrr: {read_binop(code, pc, src1, src2, dst);
binary_or_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_or_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_or_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_or_s32_rrr: {read_binop(code, pc, src1, src2, dst);
binary_or_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_or_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_or_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_or_u64_rrr: {read_binop(code, pc, src1, src2, dst);
binary_or_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_or_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_or_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_or_s64_rrr: {read_binop(code, pc, src1, src2, dst);
binary_or_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_or_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_or_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_xor_u8_rrr: {read_binop(code, pc, src1, src2, dst);
binary_xor_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_xor_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_xor_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_xor_s8_rrr: {read_binop(code, pc, src1, src2, dst);
binary_xor_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_xor_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_xor_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_xor_u16_rrr: {read_binop(code, pc, src1, src2, dst);
binary_xor_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_xor_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_xor_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_xor_s16_rrr: {read_binop(code, pc, src1, src2, dst);
binary_xor_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_xor_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_xor_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_xor_u32_rrr: {read_binop(code, pc, src1, src2, dst);
binary_xor_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_xor_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_xor_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_xor_s32_rrr: {read_binop(code, pc, src1, src2, dst);
binary_xor_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_xor_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_xor_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_xor_u64_rrr: {read_binop(code, pc, src1, src2, dst);
binary_xor_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_xor_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_xor_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case binary_xor_s64_rrr: {read_binop(code, pc, src1, src2, dst);
binary_xor_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case binary_xor_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
binary_xor_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case add_u8_rrr: {read_binop(code, pc, src1, src2, dst);
add_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case add_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
add_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case add_s8_rrr: {read_binop(code, pc, src1, src2, dst);
add_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case add_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
add_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case add_u16_rrr: {read_binop(code, pc, src1, src2, dst);
add_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case add_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
add_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case add_s16_rrr: {read_binop(code, pc, src1, src2, dst);
add_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case add_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
add_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case add_u32_rrr: {read_binop(code, pc, src1, src2, dst);
add_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case add_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
add_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case add_s32_rrr: {read_binop(code, pc, src1, src2, dst);
add_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case add_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
add_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case add_u64_rrr: {read_binop(code, pc, src1, src2, dst);
add_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case add_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
add_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case add_s64_rrr: {read_binop(code, pc, src1, src2, dst);
add_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case add_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
add_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case add_f32_rrr: {read_binop(code, pc, src1, src2, dst);
add_rrr<float>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case add_f32_rcr: {float src2_value;read_binop(code, pc, src1, src2_value, dst);
add_rcr<float>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case add_f64_rrr: {read_binop(code, pc, src1, src2, dst);
add_rrr<double>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case add_f64_rcr: {double src2_value;read_binop(code, pc, src1, src2_value, dst);
add_rcr<double>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case sub_u8_rrr: {read_binop(code, pc, src1, src2, dst);
sub_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case sub_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
sub_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case sub_s8_rrr: {read_binop(code, pc, src1, src2, dst);
sub_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case sub_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
sub_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case sub_u16_rrr: {read_binop(code, pc, src1, src2, dst);
sub_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case sub_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
sub_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case sub_s16_rrr: {read_binop(code, pc, src1, src2, dst);
sub_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case sub_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
sub_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case sub_u32_rrr: {read_binop(code, pc, src1, src2, dst);
sub_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case sub_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
sub_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case sub_s32_rrr: {read_binop(code, pc, src1, src2, dst);
sub_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case sub_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
sub_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case sub_u64_rrr: {read_binop(code, pc, src1, src2, dst);
sub_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case sub_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
sub_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case sub_s64_rrr: {read_binop(code, pc, src1, src2, dst);
sub_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case sub_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
sub_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case sub_f32_rrr: {read_binop(code, pc, src1, src2, dst);
sub_rrr<float>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case sub_f32_rcr: {float src2_value;read_binop(code, pc, src1, src2_value, dst);
sub_rcr<float>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case sub_f64_rrr: {read_binop(code, pc, src1, src2, dst);
sub_rrr<double>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case sub_f64_rcr: {double src2_value;read_binop(code, pc, src1, src2_value, dst);
sub_rcr<double>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case mul_u8_rrr: {read_binop(code, pc, src1, src2, dst);
mul_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case mul_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
mul_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case mul_s8_rrr: {read_binop(code, pc, src1, src2, dst);
mul_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case mul_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
mul_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case mul_u16_rrr: {read_binop(code, pc, src1, src2, dst);
mul_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case mul_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
mul_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case mul_s16_rrr: {read_binop(code, pc, src1, src2, dst);
mul_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case mul_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
mul_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case mul_u32_rrr: {read_binop(code, pc, src1, src2, dst);
mul_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case mul_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
mul_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case mul_s32_rrr: {read_binop(code, pc, src1, src2, dst);
mul_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case mul_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
mul_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case mul_u64_rrr: {read_binop(code, pc, src1, src2, dst);
mul_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case mul_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
mul_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case mul_s64_rrr: {read_binop(code, pc, src1, src2, dst);
mul_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case mul_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
mul_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case mul_f32_rrr: {read_binop(code, pc, src1, src2, dst);
mul_rrr<float>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case mul_f32_rcr: {float src2_value;read_binop(code, pc, src1, src2_value, dst);
mul_rcr<float>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case mul_f64_rrr: {read_binop(code, pc, src1, src2, dst);
mul_rrr<double>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case mul_f64_rcr: {double src2_value;read_binop(code, pc, src1, src2_value, dst);
mul_rcr<double>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case div_u8_rrr: {read_binop(code, pc, src1, src2, dst);
div_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case div_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
div_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case div_s8_rrr: {read_binop(code, pc, src1, src2, dst);
div_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case div_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
div_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case div_u16_rrr: {read_binop(code, pc, src1, src2, dst);
div_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case div_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
div_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case div_s16_rrr: {read_binop(code, pc, src1, src2, dst);
div_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case div_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
div_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case div_u32_rrr: {read_binop(code, pc, src1, src2, dst);
div_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case div_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
div_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case div_s32_rrr: {read_binop(code, pc, src1, src2, dst);
div_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case div_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
div_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case div_u64_rrr: {read_binop(code, pc, src1, src2, dst);
div_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case div_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
div_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case div_s64_rrr: {read_binop(code, pc, src1, src2, dst);
div_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case div_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
div_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case div_f32_rrr: {read_binop(code, pc, src1, src2, dst);
div_rrr<float>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case div_f32_rcr: {float src2_value;read_binop(code, pc, src1, src2_value, dst);
div_rcr<float>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case div_f64_rrr: {read_binop(code, pc, src1, src2, dst);
div_rrr<double>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case div_f64_rcr: {double src2_value;read_binop(code, pc, src1, src2_value, dst);
div_rcr<double>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lt_u8_rrr: {read_binop(code, pc, src1, src2, dst);
lt_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lt_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lt_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lt_s8_rrr: {read_binop(code, pc, src1, src2, dst);
lt_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lt_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lt_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lt_u16_rrr: {read_binop(code, pc, src1, src2, dst);
lt_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lt_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lt_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lt_s16_rrr: {read_binop(code, pc, src1, src2, dst);
lt_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lt_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lt_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lt_u32_rrr: {read_binop(code, pc, src1, src2, dst);
lt_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lt_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lt_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lt_s32_rrr: {read_binop(code, pc, src1, src2, dst);
lt_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lt_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lt_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lt_u64_rrr: {read_binop(code, pc, src1, src2, dst);
lt_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lt_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lt_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lt_s64_rrr: {read_binop(code, pc, src1, src2, dst);
lt_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lt_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lt_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lt_f32_rrr: {read_binop(code, pc, src1, src2, dst);
lt_rrr<float>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lt_f32_rcr: {float src2_value;read_binop(code, pc, src1, src2_value, dst);
lt_rcr<float>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lt_f64_rrr: {read_binop(code, pc, src1, src2, dst);
lt_rrr<double>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lt_f64_rcr: {double src2_value;read_binop(code, pc, src1, src2_value, dst);
lt_rcr<double>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gt_u8_rrr: {read_binop(code, pc, src1, src2, dst);
gt_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gt_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gt_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gt_s8_rrr: {read_binop(code, pc, src1, src2, dst);
gt_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gt_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gt_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gt_u16_rrr: {read_binop(code, pc, src1, src2, dst);
gt_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gt_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gt_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gt_s16_rrr: {read_binop(code, pc, src1, src2, dst);
gt_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gt_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gt_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gt_u32_rrr: {read_binop(code, pc, src1, src2, dst);
gt_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gt_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gt_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gt_s32_rrr: {read_binop(code, pc, src1, src2, dst);
gt_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gt_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gt_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gt_u64_rrr: {read_binop(code, pc, src1, src2, dst);
gt_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gt_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gt_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gt_s64_rrr: {read_binop(code, pc, src1, src2, dst);
gt_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gt_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gt_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gt_f32_rrr: {read_binop(code, pc, src1, src2, dst);
gt_rrr<float>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gt_f32_rcr: {float src2_value;read_binop(code, pc, src1, src2_value, dst);
gt_rcr<float>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gt_f64_rrr: {read_binop(code, pc, src1, src2, dst);
gt_rrr<double>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gt_f64_rcr: {double src2_value;read_binop(code, pc, src1, src2_value, dst);
gt_rcr<double>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lte_u8_rrr: {read_binop(code, pc, src1, src2, dst);
lte_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lte_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lte_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lte_s8_rrr: {read_binop(code, pc, src1, src2, dst);
lte_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lte_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lte_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lte_u16_rrr: {read_binop(code, pc, src1, src2, dst);
lte_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lte_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lte_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lte_s16_rrr: {read_binop(code, pc, src1, src2, dst);
lte_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lte_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lte_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lte_u32_rrr: {read_binop(code, pc, src1, src2, dst);
lte_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lte_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lte_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lte_s32_rrr: {read_binop(code, pc, src1, src2, dst);
lte_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lte_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lte_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lte_u64_rrr: {read_binop(code, pc, src1, src2, dst);
lte_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lte_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lte_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lte_s64_rrr: {read_binop(code, pc, src1, src2, dst);
lte_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lte_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
lte_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lte_f32_rrr: {read_binop(code, pc, src1, src2, dst);
lte_rrr<float>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lte_f32_rcr: {float src2_value;read_binop(code, pc, src1, src2_value, dst);
lte_rcr<float>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case lte_f64_rrr: {read_binop(code, pc, src1, src2, dst);
lte_rrr<double>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case lte_f64_rcr: {double src2_value;read_binop(code, pc, src1, src2_value, dst);
lte_rcr<double>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gte_u8_rrr: {read_binop(code, pc, src1, src2, dst);
gte_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gte_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gte_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gte_s8_rrr: {read_binop(code, pc, src1, src2, dst);
gte_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gte_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gte_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gte_u16_rrr: {read_binop(code, pc, src1, src2, dst);
gte_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gte_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gte_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gte_s16_rrr: {read_binop(code, pc, src1, src2, dst);
gte_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gte_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gte_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gte_u32_rrr: {read_binop(code, pc, src1, src2, dst);
gte_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gte_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gte_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gte_s32_rrr: {read_binop(code, pc, src1, src2, dst);
gte_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gte_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gte_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gte_u64_rrr: {read_binop(code, pc, src1, src2, dst);
gte_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gte_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gte_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gte_s64_rrr: {read_binop(code, pc, src1, src2, dst);
gte_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gte_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
gte_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gte_f32_rrr: {read_binop(code, pc, src1, src2, dst);
gte_rrr<float>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gte_f32_rcr: {float src2_value;read_binop(code, pc, src1, src2_value, dst);
gte_rcr<float>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case gte_f64_rrr: {read_binop(code, pc, src1, src2, dst);
gte_rrr<double>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case gte_f64_rcr: {double src2_value;read_binop(code, pc, src1, src2_value, dst);
gte_rcr<double>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case eq_u8_rrr: {read_binop(code, pc, src1, src2, dst);
eq_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case eq_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
eq_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case eq_s8_rrr: {read_binop(code, pc, src1, src2, dst);
eq_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case eq_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
eq_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case eq_u16_rrr: {read_binop(code, pc, src1, src2, dst);
eq_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case eq_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
eq_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case eq_s16_rrr: {read_binop(code, pc, src1, src2, dst);
eq_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case eq_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
eq_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case eq_u32_rrr: {read_binop(code, pc, src1, src2, dst);
eq_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case eq_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
eq_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case eq_s32_rrr: {read_binop(code, pc, src1, src2, dst);
eq_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case eq_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
eq_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case eq_u64_rrr: {read_binop(code, pc, src1, src2, dst);
eq_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case eq_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
eq_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case eq_s64_rrr: {read_binop(code, pc, src1, src2, dst);
eq_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case eq_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
eq_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case eq_f32_rrr: {read_binop(code, pc, src1, src2, dst);
eq_rrr<float>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case eq_f32_rcr: {float src2_value;read_binop(code, pc, src1, src2_value, dst);
eq_rcr<float>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case eq_f64_rrr: {read_binop(code, pc, src1, src2, dst);
eq_rrr<double>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case eq_f64_rcr: {double src2_value;read_binop(code, pc, src1, src2_value, dst);
eq_rcr<double>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case ne_u8_rrr: {read_binop(code, pc, src1, src2, dst);
ne_rrr<std::uint8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case ne_u8_rcr: {std::uint8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
ne_rcr<std::uint8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case ne_s8_rrr: {read_binop(code, pc, src1, src2, dst);
ne_rrr<std::int8_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case ne_s8_rcr: {std::int8_t src2_value;read_binop(code, pc, src1, src2_value, dst);
ne_rcr<std::int8_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case ne_u16_rrr: {read_binop(code, pc, src1, src2, dst);
ne_rrr<std::uint16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case ne_u16_rcr: {std::uint16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
ne_rcr<std::uint16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case ne_s16_rrr: {read_binop(code, pc, src1, src2, dst);
ne_rrr<std::int16_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case ne_s16_rcr: {std::int16_t src2_value;read_binop(code, pc, src1, src2_value, dst);
ne_rcr<std::int16_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case ne_u32_rrr: {read_binop(code, pc, src1, src2, dst);
ne_rrr<std::uint32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case ne_u32_rcr: {std::uint32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
ne_rcr<std::uint32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case ne_s32_rrr: {read_binop(code, pc, src1, src2, dst);
ne_rrr<std::int32_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case ne_s32_rcr: {std::int32_t src2_value;read_binop(code, pc, src1, src2_value, dst);
ne_rcr<std::int32_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case ne_u64_rrr: {read_binop(code, pc, src1, src2, dst);
ne_rrr<std::uint64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case ne_u64_rcr: {std::uint64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
ne_rcr<std::uint64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case ne_s64_rrr: {read_binop(code, pc, src1, src2, dst);
ne_rrr<std::int64_t>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case ne_s64_rcr: {std::int64_t src2_value;read_binop(code, pc, src1, src2_value, dst);
ne_rcr<std::int64_t>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case ne_f32_rrr: {read_binop(code, pc, src1, src2, dst);
ne_rrr<float>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case ne_f32_rcr: {float src2_value;read_binop(code, pc, src1, src2_value, dst);
ne_rcr<float>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case ne_f64_rrr: {read_binop(code, pc, src1, src2, dst);
ne_rrr<double>(m, m.registers[src1], m.registers[src2], m.registers[dst]);
} break;
	case ne_f64_rcr: {double src2_value;read_binop(code, pc, src1, src2_value, dst);
ne_rcr<double>(m, m.registers[src1], src2_value, m.registers[dst]);
} break;
	case zero_u8_nnr: {read_unop(code, pc, dst);
zero_nnr<std::uint8_t>(m, m.registers[dst]);
} break;
	case inc_u8_nnr: {read_unop(code, pc, dst);
inc_nnr<std::uint8_t>(m, m.registers[dst]);
} break;
	case dec_u8_nnr: {read_unop(code, pc, dst);
dec_nnr<std::uint8_t>(m, m.registers[dst]);
} break;
	case zero_s8_nnr: {read_unop(code, pc, dst);
zero_nnr<std::int8_t>(m, m.registers[dst]);
} break;
	case inc_s8_nnr: {read_unop(code, pc, dst);
inc_nnr<std::int8_t>(m, m.registers[dst]);
} break;
	case dec_s8_nnr: {read_unop(code, pc, dst);
dec_nnr<std::int8_t>(m, m.registers[dst]);
} break;
	case zero_u16_nnr: {read_unop(code, pc, dst);
zero_nnr<std::uint16_t>(m, m.registers[dst]);
} break;
	case inc_u16_nnr: {read_unop(code, pc, dst);
inc_nnr<std::uint16_t>(m, m.registers[dst]);
} break;
	case dec_u16_nnr: {read_unop(code, pc, dst);
dec_nnr<std::uint16_t>(m, m.registers[dst]);
} break;
	case zero_s16_nnr: {read_unop(code, pc, dst);
zero_nnr<std::int16_t>(m, m.registers[dst]);
} break;
	case inc_s16_nnr: {read_unop(code, pc, dst);
inc_nnr<std::int16_t>(m, m.registers[dst]);
} break;
	case dec_s16_nnr: {read_unop(code, pc, dst);
dec_nnr<std::int16_t>(m, m.registers[dst]);
} break;
	case zero_u32_nnr: {read_unop(code, pc, dst);
zero_nnr<std::uint32_t>(m, m.registers[dst]);
} break;
	case inc_u32_nnr: {read_unop(code, pc, dst);
inc_nnr<std::uint32_t>(m, m.registers[dst]);
} break;
	case dec_u32_nnr: {read_unop(code, pc, dst);
dec_nnr<std::uint32_t>(m, m.registers[dst]);
} break;
	case zero_s32_nnr: {read_unop(code, pc, dst);
zero_nnr<std::int32_t>(m, m.registers[dst]);
} break;
	case inc_s32_nnr: {read_unop(code, pc, dst);
inc_nnr<std::int32_t>(m, m.registers[dst]);
} break;
	case dec_s32_nnr: {read_unop(code, pc, dst);
dec_nnr<std::int32_t>(m, m.registers[dst]);
} break;
	case zero_u64_nnr: {read_unop(code, pc, dst);
zero_nnr<std::uint64_t>(m, m.registers[dst]);
} break;
	case inc_u64_nnr: {read_unop(code, pc, dst);
inc_nnr<std::uint64_t>(m, m.registers[dst]);
} break;
	case dec_u64_nnr: {read_unop(code, pc, dst);
dec_nnr<std::uint64_t>(m, m.registers[dst]);
} break;
	case zero_s64_nnr: {read_unop(code, pc, dst);
zero_nnr<std::int64_t>(m, m.registers[dst]);
} break;
	case inc_s64_nnr: {read_unop(code, pc, dst);
inc_nnr<std::int64_t>(m, m.registers[dst]);
} break;
	case dec_s64_nnr: {read_unop(code, pc, dst);
dec_nnr<std::int64_t>(m, m.registers[dst]);
} break;
	case zero_f32_nnr: {read_unop(code, pc, dst);
zero_nnr<float>(m, m.registers[dst]);
} break;
	case inc_f32_nnr: {read_unop(code, pc, dst);
inc_nnr<float>(m, m.registers[dst]);
} break;
	case dec_f32_nnr: {read_unop(code, pc, dst);
dec_nnr<float>(m, m.registers[dst]);
} break;
	case zero_f64_nnr: {read_unop(code, pc, dst);
zero_nnr<double>(m, m.registers[dst]);
} break;
	case inc_f64_nnr: {read_unop(code, pc, dst);
inc_nnr<double>(m, m.registers[dst]);
} break;
	case dec_f64_nnr: {read_unop(code, pc, dst);
dec_nnr<double>(m, m.registers[dst]);
} break;
	}
}
}
